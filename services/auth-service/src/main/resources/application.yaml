spring:
  application:
    name: auth-service
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      properties:
        spring.json:
          value.default.type: java.util.Map
          trusted.packages: '*'
          use.type.headers: false
        spring.deserializer:
          key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
          value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI:http://localhost:8080/realms/cab-aggregator-realm/protocol/openid-connect/certs}
business:
  keycloak:
    server-url: ${KEYCLOAK_SERVER_URL:http://localhost:8080}
    realm: ${KEYCLOAK_REALM:mealmap-realm}
    grant-type: ${KEYCLOAK_GRANT_TYPE:client_credentials}
    email-service:
      enabled: ${KEYCLOAK_EMAIL_SERVICE_ENABLED:false}
    client:
      client-id: ${KEYCLOAK_ADMIN_CLIENT_ID:auth-service}
      client-secret: ${KEYCLOAK_ADMIN_CLIENT_SECRET:gbLelnwDQ3xKPvokRNSRX1rriyhhU2rd}
  kafka:
    topics:
      user-creation:
        name: user.creation.v1
        partitions: 1
        replicas: 1
      user-update:
        name: user.update.v1
        consumer:
          group-id: user.update.consumer.group
      user-role-update:
        name: user.role-update.v1
        consumer:
          group-id: user.role-update.consumer.group
      user-status-update:
        name: user.status-update.v1
        consumer:
          group-id: user.status-update.group
  services:
    organization:
      name: ${ORGANIZATION_API_NAME:organization-service}
      path: ${ORGANIZATION_API_PATH:api/v1/organizations}
eureka:
  client:
    service-url:
      default-zone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
server:
  port: ${SERVER_PORT:8083}
