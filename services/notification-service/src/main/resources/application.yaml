spring:
  application:
    name: notification-service
  data:
    mongodb:
      uri: mongodb://${DB_URL:localhost:27026}
      username: ${DB_USERNAME:mongo}
      password: ${DB_PASSWORD:root}
      replica-set-name: ${DB_REPLICA_SET_NAME:rs0}
      database: ${DB_NAME:notification_database}
  mail:
    host: ${MAIL_SERVICE_HOST:smtp.mailersend.net}
    port: ${MAIL_SERVICE_PORT:587}
    username: ${MAIL_SERVICE_CLIENT_USERNAME:MS_lme1Wd@test-nrw7gym6oxog2k8e.mlsender.net}
    password: ${MAIL_SERVICE_CLIENT_PASSWORD:mssp.PxRuWP4.0p7kx4xnmm8g9yjr.ccVpOXd}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    default-encoding: UTF-8
  kafka:
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      properties:
        spring.json:
          value.default.type: java.util.Map
          trusted.packages: '*'
          use.type.headers: false
        spring.deserializer:
          key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
          value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
security:
  oauth2:
    client:
      client-id: ${OAUTH2_CLIENT_CLIENT_ID:notification-service}
      client-secret: ${OAUTH2_CLIENT_CLIENT_SECRET:IZkO3Ga47lVqu9Iwo4n5W9gbVy0Myqgi}
  web:
    cors:
      allowed-origins:
        - ${ALLOWED_ORIGINS_LOCALHOST:http://localhost:3000}
        - ${ALLOWED_ORIGINS_PRODUCTION:http://172.20.10.4:3000}
    open-endpoints:
      actuator:
        - /actuator/**
      open-api:
        - /swagger-ui/**
        - /swagger-resources/**
        - /v3/api-docs/**
        - /v3/api-docs.yaml
mongock:
  migration-scan-package: com.mealmap.notificationservice.migration
  transactional: true
  enabled: true
business:
  kafka:
    topics:
      user-contacts-creation:
        name: user-contacts.creation.v1
        consumer:
          group-id: user-contacts.creation.consumer.group
      user-contacts-update:
        name: user-contacts.update.v1
        consumer:
          group-id: user-contacts.update.consumer.group
      user-contacts-update-tg-chat:
        name: user-contacts.update-tg-chat.v1
        consumer:
          group-id: user-contacts.update-tg-chat.consumer.group
      notification-creation:
        name: notification.creation.v1
        consumer:
          group-id: notification.creation.consumer.group
    template:
      observation-enabled: true
    listener:
      observation-enabled: true
  notifications:
    email:
      enabled: ${NOTIFICATIONS_EMAIL_ENABLED:true}
      sender:
        email: ${NOTIFICATIONS_EMAIL_SENDER_EMAIL:mealmap@test-nrw7gym6oxog2k8e.mlsender.net}
        name: ${NOTIFICATIONS_EMAIL_SENDER_NAME:MealMap - сервис организации корпоративного питания}
    telegram:
      enabled: ${NOTIFICATIONS_TELEGRAM_ENABLED:true}
    sms:
      enabled: ${NOTIFICATIONS_SMS_ENABLED:false}
  services:
    telegram-bot:
      name: ${TELEGRAM_BOT_API_NAME:telegram-bot}
      path: ${TELEGRAM_BOT_API_PATH:api/v1/telegram-bot}
eureka:
  client:
    service-url:
      default-zone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,info,metrics
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_TRACING_ENDPOINT:http://localhost:9411/api/v2/spans}
logging:
  logstash:
    server: ${LOGSTASH_HOSTPORT:localhost:5000}
server:
  port: ${SERVER_PORT:8091}
