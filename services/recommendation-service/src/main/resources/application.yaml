spring:
  application:
    name: recommendation-service
  data:
    mongodb:
      uri: mongodb://${DB_URL:localhost:27024}
      username: ${DB_USERNAME:mongo}
      password: ${DB_PASSWORD:root}
      replica-set-name: ${DB_REPLICA_SET_NAME:rs0}
      database: ${DB_NAME:recommendation_database}
  ai:
    ollama:
      base-url: ${AI_OLLAMA_BASE_URL:http://localhost:11434}
      chat:
        options:
          model: ${AI_OLLAMA_CHAT_MODEL:qwen2.5:3b}
          temperature: ${AI_OLLAMA_CHAT_TEMPERATURE:1.0}
      init:
        pull-model-strategy: ${AI_OLLAMA_PULL_STRATEGY:always}
security:
  oauth2:
    client:
      client-id: ${OAUTH2_CLIENT_CLIENT_ID:recommendation-service}
      client-secret: ${OAUTH2_CLIENT_CLIENT_SECRET:YO4pPxzpV0RofhaEVg7t5tcdGJwL6gJ3}
  web:
    cors:
      allowed-origins:
        - ${ALLOWED_ORIGINS_LOCALHOST:http://localhost:3000}
        - ${ALLOWED_ORIGINS_PRODUCTION:http://172.20.10.4:3000}
    open-endpoints:
      actuator:
        - /actuator/**
mongock:
  migration-scan-package: com.cabaggregator.rideservice.migration
  transactional: true
  enabled: true
business:
  services:
    product:
      name: ${PRODUCT_API_NAME:product-service}
      path: ${PRODUCT_API_PATH:api/v1/products}
    order:
      name: ${ORDER_API_NAME:order-service}
      path: ${ORDER_API_PATH:api/v1/users}
    preference:
      name: ${PREFERENCE_API_NAME:preference-service}
      path: ${PREFERENCE_API_PATH:api/v1/users}
    health:
      name: ${HEALTH_API_NAME:health-service}
      path: ${HEALTH_API_PATH:api/v1/users}
  recommendation:
    settings:
      last-orders:
        count: ${RECOMMENDATION_SETTINGS_LAST_ORDERS_COUNT:10}
eureka:
  client:
    service-url:
      default-zone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,info,metrics
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
logging:
  logstash:
    server: ${LOGSTASH_HOSTPORT:localhost:5000}
server:
  port: ${SERVER_PORT:8090}
