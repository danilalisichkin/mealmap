spring:
  application:
    name: telegram-bot
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    template:
      observation-enabled: true
    listener:
      observation-enabled: true
telegram:
  bot:
    token: ${TG_BOT_TOKEN:8100969019:AAH-l7PfAyfdOhQGVRzeLkrab0to0jEn9S8}
    username: ${TG_BOT_USERNAME:melmap_by_chatbot}
security:
  oauth2:
    client:
      client-id: ${OAUTH2_CLIENT_CLIENT_ID:telegram-bot}
      client-secret: ${OAUTH2_CLIENT_CLIENT_SECRET:fGxyiddJQOB4mHOQhPDXJJk27ItCYwfI}
  web:
    cors:
      allowed-origins:
        - ${ALLOWED_ORIGINS_LOCALHOST:http://localhost:3000}
        - ${ALLOWED_ORIGINS_PRODUCTION:http://172.20.10.4:3000}
    open-endpoints:
      actuator:
        - /actuator/**
      open-api:
        - /swagger-ui/**
        - /swagger-resources/**
        - /v3/api-docs/**
        - /v3/api-docs.yaml
business:
  kafka:
    topics:
      user-contacts-update-tg-chat:
        name: user-contacts.update-tg-chat.v1
        partitions: 1
        replicas: 1
eureka:
  client:
    service-url:
      default-zone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,info,metrics
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_TRACING_ENDPOINT:http://localhost:9411/api/v2/spans}
logging:
  logstash:
    server: ${LOGSTASH_HOSTPORT:localhost:5000}
server:
  port: ${SERVER_PORT:8092}
